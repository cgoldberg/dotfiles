# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# export some environment variables
export PAGER="less"
export VISUAL="vi"
export EDITOR="vi"

# export environment variables for termcap colors
# used by less pager for colors
export LESS_TERMCAP_mb=$(printf '\e[01;31m')
export LESS_TERMCAP_md=$(printf '\e[01;38;5;75m')
export LESS_TERMCAP_me=$(printf '\e[0m')
export LESS_TERMCAP_se=$(printf '\e[0m')
export LESS_TERMCAP_so=$(printf '\e[01;33m')
export LESS_TERMCAP_ue=$(printf '\e[0m')
export LESS_TERMCAP_us=$(printf '\e[04;38;5;200m')

# search command history by regex (case-insensitive) show last n matches
# usage: h <pattern>
h () {
    local n="150"
    history | grep -i --color=always "$1" | tail -n "$n"
}

# append to the history file, don't overwrite it
shopt -s histappend

# edit a recalled history line before executing
shopt -s histverify

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# save each line of a multi-line command in the same history entry
shopt -s cmdhist

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# save each line of a multi-line command in the same history entry
shopt -s cmdhist

# don't show duplicate commands in history
HISTCONTROL=ignoredups

# number of previous commands stored in history file
HISTSIZE=999

# number of previous commands stored in memory for current session
HISTFILESIZE=999

# show timestamp of each command (Weekday Month/Day Hour:Min)
HISTTIMEFORMAT="[%a %m/%d %H:%M]  "

# immediately add commands to history instead of waiting for end of session
PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# set the title to user@host:dir
PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"

# enable color support of grep and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep="grep --color=auto"
    alias fgrep="fgrep --color=auto"
    alias egrep="egrep --color=auto"
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# navigate up the directory tree
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias ........="cd ../../../../../../.."
alias cd..="cd .."
alias cd...="cd ../.."
alias cd....="cd ../../.."
alias cd.....="cd ../../../.."
alias cd......="cd ../../../../.."
alias cd.......="cd ../../../../../.."
alias cd........="cd ../../../../../../.."

# expand aliases when running sudo
alias sudo="sudo "

# expand aliases when running watch
alias watch="watch "

# create directory (make parent directories as needed)
alias mkdir="mkdir --parents --verbose"

# go back to previous directory
alias bk="cd ${OLDPWD}"

# version control
alias g="git"

# editors
alias subl="\subl --new-window"
alias edit="subl"
alias ed="subl"
alias e="\subl --new-window ."

# pagers
alias less="\less --LONG-PROMPT --no-init --quit-at-eof --quit-if-one-screen --quit-on-intr --RAW-CONTROL-CHARS"
alias more="less"

# extract a tarball
alias untar="tar zxvf"

# exit shell
alias x="exit"

# open ~/.bashrc for editing with sublime
alias ebrc="subl ${HOME}/.bashrc"

# reset terminal (clears screen and scrollback buffer)
alias cls="tput reset"

# list dirs/files in tree format
alias tree="tree -ash -CF --du"

# python
alias python="python3"
alias py="python3"
alias activate="source ./venv/bin/activate"
alias act="activate"
alias deact="deactivate"

# python - create a virtual env and activate it if none exists, otherwise just activate it
alias venv="[ ! -d './venv' ] && python3 -m venv --upgrade-deps venv && activate || activate"

# more ls aliases
alias ls="ls --almost-all --classify --group-directories-first --color=always"
alias l="LC_COLLATE=C \ls -l --almost-all --classify --group-directories-first --human-readable --no-group --color=always"
alias la="l"
alias ll="l"

# colored diffs
if [ -x /usr/bin/dircolors ]; then
    alias diff="colordiff --report-identical-files"
fi

# grep recursively with case-insensitive match and other defaults
alias rgrep="\rgrep \
        --binary-files=without-match \
        --color=auto \
        --devices=skip \
        --ignore-case \
        --line-number \
        --no-messages \
        --with-filename \
        --exclude-dir=.cache \
        --exclude-dir=.git \
        --exclude-dir=.tox \
        --exclude-dir=venv \
        --exclude=*.css \
        --exclude=*.js \
        --exclude=*.svg"

# reload shell configuration
re-source () {
    echo 'sourcing ~/.bashrc ...'
    source "${HOME}/.bashrc"
    # if a virtual env is active, reactivate it, since the prompt prefix gets clobbered
    if [ ! -z "${VIRTUAL_ENV}" ]; then
        source "${VIRTUAL_ENV}/bin/activate"
    fi
    echo
}

# search recursively under current directory for filenames matching pattern (case-insensitive)
findfiles () {
    find ${HOME} -xdev \
           -iname "*$1*" \
           ! -path "*/.git/*" \
           ! -path "*/.tox/*" \
           ! -path "*/venv/*" |
           grep -i --color=always "$1"
}
alias ff="findfiles"

# package maintenance
apt-up () {
    # reload package index files from sources
    sudo apt --no-allow-insecure-repositories update && echo &&
    # upgrade installed packages
    sudo apt full-upgrade && echo &&
    # check for broken dependencies
    sudo apt-get check && echo &&
    # fix broken dependencies
    sudo apt --fix-broken install && echo &&
    # fix missing dependencies
    sudo apt --fix-missing install && echo &&
    # purge packages that are no longer needed
    sudo apt --purge autoremove && echo &&
    # remove cached packages
    sudo apt clean && echo &&
    # reload package index files from sources
    sudo apt --no-allow-insecure-repositories update && echo
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - bash)"

