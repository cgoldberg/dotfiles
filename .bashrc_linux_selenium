# ~/.bashrc_linux_selenium
# =========================
#  bash shell configuration
# =========================


# only use this file on Linux
if [[ "${OSTYPE}" != "linux"* ]]; then
    return
fi


SELENIUM_DEV_HOME="${HOME}/code/selenium"


# only activate these functions if we have the selenium repo cloned
if [ ! -d "${SELENIUM_DEV_HOME}" ]; then
    return
fi


# print messages to stderr along with date/time
err() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S%z')]: $*" 1>&2
}


# kill all running webdrivers and selenium grid server
kill-webdrivers () {
    local processes=(
        "chromedriver"
        "geckodriver"
        "msedgedriver"
        "webkitwebdriver"
        "java"
    )
    for process in "${processes[@]}"; do
        \killall --ignore-case --process-group --quiet --wait "${process}"
    done
    sleep 0.5
    for process in "${processes[@]}"; do
        \killall -9 --ignore-case --process-group --quiet --wait "${process}"
    done
}


# clean selenium dev environment (cache, browsers, webdrivers, build artifacts)
clean-selenium-dev-full () {
    clean-selenium-dev
    local sel_home="${SELENIUM_DEV_HOME}"
    local sel_dirs=(
        ${sel_home}/py/selenium/webdriver/common/devtools/
        ${sel_home}/py/selenium/webdriver/common/linux/
        ${sel_home}/py/selenium/webdriver/common/macos/
        ${sel_home}/py/selenium/webdriver/common/windows/
    )
    local symlinks=(
        ${sel_home}/bazel-bin
        ${sel_home}/bazel-genfiles
        ${sel_home}/bazel-out
        ${sel_home}/bazel-selenium
        ${sel_home}/bazel-testlogs
    )
    local dot_dirs=(
        ${HOME}/.cache/bazel/
        ${HOME}/.cache/bazelisk/
        ${HOME}/.cache/google-chrome*/
        ${HOME}/.cache/Microsoft/
        ${HOME}/.cache/mozilla/
        ${HOME}/.cache/pnpm/
        ${HOME}/.cache/selenium/
        ${HOME}/.config/google-chrome*/
        ${HOME}/.config/microsoft-edge*/
        ${HOME}/.mozilla/
    )
    echo "cleaning up selenium cache, browsers, webdrivers, build artifacts ..."
    if [ -d "${sel_home}" ]; then
        for sd in ${sel_dirs[@]}; do
            if [ -d ${sd} ]; then
                echo "deleting ${sd}"
                rm -rf ${sd}
            fi
        done
    fi
    if [ -d "${sel_home}" ]; then
        for sl in ${symlinks[@]}; do
            if [ -L ${sl} ]; then
                echo "deleting ${sl}"
                sudo rm -rf ${sl}
            fi
        done
    fi
    for dd in ${dot_dirs[@]}; do
        if [ -d ${dd} ]; then
            echo "deleting ${dd}"
            sudo rm -rf ${dd}
        fi
    done
}


# clean selenium dev environment
clean-selenium-dev () {
    local sel_home="${SELENIUM_DEV_HOME}"
    local dirs=(
        ${sel_home}/.venv/
        ${sel_home}/build/
        ${sel_home}/dist/
        ${sel_home}/venv/
        ${sel_home}/py/.venv/
        ${sel_home}/py/build/
        ${sel_home}/py/dist/
        ${sel_home}/py/venv/
    )
    local recurse_dirs=(
        ${sel_home}/**/.tox/
        ${sel_home}/**/.*_cache/
        ${sel_home}/**/*.egg-info/
        ${sel_home}/**/__pycache__/
    )
    echo "cleaning up selenium dev environment ..."
    if [ ! -z "${VIRTUAL_ENV}" ]; then
        echo "deactivating venv"
        deactivate
    fi
    for d in ${dirs[@]}; do
        if [ -d ${d} ]; then
            echo "deleting ${d}"
            rm -rf ${d}
        fi
    done
    for rd in ${recurse_dirs[@]}; do
        echo "recursively deleting ${rd}"
        rm -rf ${rd}
    done
}


# run selenium grid server in standalone mode (on port 4444)
# download server first with github cli if it's not found
selenium-server () {
    local sel_home="${SELENIUM_DEV_HOME}"
    local jar="selenium-server.jar"
    if [ ! -f /usr/bin/gh ]; then
        err "github cli is not installed"
        return 1
    fi
    cd ${sel_home}
    if [ ! -f "${jar}" ]; then
        gh release download --pattern=selenium-server*.jar --output=${jar}
    fi
    if [ ! -f /usr/bin/java ]; then
        err "can't find java"
        cd "${OLDPWD}"
        return 1
    fi
    java -jar "${jar}" standalone
    cd "${OLDPWD}"
}


# delete and re-install all webdrivers and browsers used by selenium
# also delete and re-download selenium grid server
update-webrivers () {
    kill-webdrivers
    local sel_home="${SELENIUM_DEV_HOME}"
    local sel_mgr_path="${sel_home}/py/selenium/webdriver/common/linux"
    local jar="selenium-server.jar"
    local dirs=(
        ${HOME}/.cache/google-chrome*/
        ${HOME}/.cache/Microsoft/
        ${HOME}/.cache/mozilla/
        ${HOME}/.cache/selenium/
        ${HOME}/.config/google-chrome*/
        ${HOME}/.config/microsoft-edge*/
        ${HOME}/.mozilla/
    )
    if [ ! -d "${sel_mgr_path}" ]; then
        err "selenium-manager not found in: ${sel_mgr_path}"
        return 1
    fi
    for d in ${dirs[@]}; do
        if [ -d ${d} ]; then
            echo "deleting ${d}"
            rm -rf ${d}
        fi
    done
    cd ${sel_home}
    if [ -f "${jar}" ]; then
        echo "deleting ${sel_home}/${jar}"
        rm "./${jar}"
    fi
    echo
    echo "updating chrome/chromedriver ..."
    start_spinner
    ${sel_mgr_path}/selenium-manager --browser=chrome --driver=chromedriver
    stop_spinner
    echo "updating edge/edgedriver ..."
    start_spinner
    ${sel_mgr_path}/selenium-manager --browser=edge --driver=edgedriver
    stop_spinner
    echo "updating firefox/geckodriver ..."
    start_spinner
    ${sel_mgr_path}/selenium-manager --browser=firefox --driver=geckodriver
    stop_spinner
    if [ ! -f /usr/bin/gh ]; then
        err "github cli is not installed"
        cd "${OLDPWD}"
        return 1
    fi
    echo "updating grid server ..."
    gh release download --pattern=selenium-server*.jar --output=${jar}
    cd "${OLDPWD}"
    echo
}
