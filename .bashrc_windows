# ~/.bashrc_windows
# =========================
#  bash shell configuration
# =========================


# only use this file on Windows/MinGW
if [[ "${OSTYPE}" != "msys" ]]; then
    return
fi


# set a color prompt with: user@host:dir, git branch (if in a git repo)
custom_prompt='\[\033[01;34m\]\w\[\033[00m\]\[\033[0;32m\]$(__git_ps1 " (%s)")\[\033[0m\] \$ '
PS1="${custom_prompt}"


load_ssh_key () {
    local ssh_env=~/.ssh/agent.env
    agent_load_env () {
        if [ -f "${ssh_env}" ]; then
            source "${ssh_env}" >/dev/null
        fi
    }
    agent_start () {
        (umask 077; ssh-agent > "${ssh_env}")
        source "${ssh_env}" >/dev/null
    }
    agent_load_env
    # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
    local agent_run_state=$(ssh-add -l >/dev/null 2>&1; echo $?)
    if [ ! "${SSH_AUTH_SOCK}" ] || [ "${agent_run_state}" == 2 ]; then
        agent_start
        ssh-add >/dev/null 2>&1
    elif [ "${SSH_AUTH_SOCK}" ] && [ "${agent_run_state}" == 1 ]; then
        ssh-add >/dev/null 2>&1
    fi
}
load_ssh_key


# exit shell
alias exit="TASKKILL //F //IM git.exe >/dev/null 2>&1; TASKKILL //F //IM ssh-agent.exe >/dev/null 2>&1; \exit"
alias x="exit"


# update all packages installed by scoop
scoop-update () {
    if [ ! -x "$(command -v fd)" ]; then
        err "scoop not installed"
        return 1
    fi
    scoop update
    scoop status
    scoop status | sed '/^[[:space:]]*$/d' | while read -r line; do
        if [[ ! "${line}" =~ ^Scoop|^Everything|^Name|^---- ]]; then
            read -ra fields <<< "${line}"
            package="${fields[0]}"
            scoop update "${package}"
        fi
    done
}


if [ "${PWD}" == "${HOME}" ] && [ -z "${OLDPWD}" ] && [ -d "${HOME}/code" ]; then
    cd "${HOME}/code"
fi
