# ~/.bashrc_windows
# =========================
#  bash shell configuration
# =========================


# only use this file on Windows/MinGW
if [[ "${OSTYPE}" != "msys" ]]; then
    return
fi


# set a colored prompt with:
# - user:dir
# - git branch with state (if in a git repo)
export GIT_PS1_HIDE_IF_PWD_IGNORED=1
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUPSTREAM="auto"
custom_prompt=\
'\[\033[1;38;5;214m\]\u\[\033[0m\]'\
'\[\033[1;38;5;255m\]:\[\033[00m\]'\
'\[\033[1;38;5;123m\]\w\[\033[00m\]'\
'\[\033[0;38;5;046m\]$(__git_ps1 " (%s)")\[\033[0m\] '\
'\[\033[1;38;5;255m\]\$ \[\033[0m\]'
PS1="${custom_prompt}"


# set the terminal title to current directory
PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'


# exit shell
alias exit="TASKKILL //F //IM git.exe >/dev/null 2>&1; \exit"
alias x="exit"


# python virtual env
alias activate="source ./venv/Scripts/activate"


# update all packages installed by scoop
scoop-update-all () {
    if [ ! -x "$(command -v fd)" ]; then
        err "scoop not installed"
        return 1
    fi
    scoop update
    scoop status
    scoop status | sed '/^[[:space:]]*$/d' | while read -r line; do
        if [[ ! "${line}" =~ ^Scoop|^Everything|^Name|^---- ]]; then
            read -ra fields <<< "${line}"
            package="${fields[0]}"
            scoop update "${package}"
        fi
    done
    scoop cache rm *
}


if [ "${PWD}" == "${HOME}" ] && [ -z "${OLDPWD}" ] && [ -d "${HOME}/code" ]; then
    cd "${HOME}/code"
fi
