#!/usr/bin/env bash

# colorize git status to indicate branch state

set -e

die() { echo "$*" 1>&2 ; exit 1; }

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "not in a git repo"
fi

if [[ "${TERM}" != *"256color" ]]; then
    git status
    exit
fi

clean="38;5;82"         # green
untracked="38;5;70"     # faded green
ahead_behind="38;5;226" # yellow
diverged="38;5;196"     # red
staged="38;5;214"       # orange yellow
unstaged="38;5;202"     # orange
dirty="38;5;196"        # red

branch=$(git rev-parse --abbrev-ref HEAD)
status=$(git status)
color="0"

declare -A messages
messages["Untracked files"]="${untracked}"
messages["Your branch is ahead"]="${ahead_behind}"
messages["Your branch is behind"]="${ahead_behind}"
messages["Changes to be committed"]="${staged}"
messages["Changed but not updated"]="${unstaged}"
messages["Changes not staged for commit"]="${unstaged}"
messages["Unmerged paths"]="${dirty}"
messages["working tree clean"]="${clean}"

for msg in "${!messages[@]}"; do
    if [[ "${status}" =~ "${msg}" ]]; then
        color="${messages[${msg}]}"
        status=$(sed "s/${msg}/\\\033[${color}m${msg}\\\033[0m/" <<<"${status}")
    fi
done

msg="Your branch.+diverged"
if [[ "${status}" =~ ${msg} ]]; then
    color="${diverged}"
    status=$(sed -E "s/(${msg})/\\\033[${color}m\0\\\033[0m/" <<<"${status}")
fi

# color branch name with last color
colored_status=$(sed "s/${branch}$/\\\033[${color}m${branch}\\\033[0m/" <<<"${status}")
echo -e "${colored_status}"
