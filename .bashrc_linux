# ~/.bashrc_linux
# =========================
#  bash shell configuration
# =========================


# only use this file on Linux
if [[ "${OSTYPE}" != "linux"* ]]; then
    return
fi


# set a color prompt with:
# - chroot (if in a chroot)
# - user:dir
# - git branch with state (if in a git repo)
export GIT_PS1_HIDE_IF_PWD_IGNORED=1
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUPSTREAM="auto"
custom_prompt='\[\033[38;5;209m\]\u\[\033[00m\]:\[\033[38;5;123m\]\w\[\033[00m\]\[\033[0;32m\]$(__git_ps1 " (%s)")\[\033[0m\] \$ '
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
    custom_prompt="\[\033[00;31m\]${debian_chroot:+($debian_chroot)} ${custom_prompt}"
fi
PS1="${custom_prompt}"


# make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# run sudo with existing environment variables and tab-completion enabled (needed for gui apps)
alias gsudo="sudo --preserve-env"
complete -F _root_command gsudo


# expand aliases when running sudo
alias sudo="sudo "


# expand aliases when running watch
alias watch="watch "


# exit shell
alias x="exit"


# kill process group by name (case-insensitive)
alias killall="\killall --ignore-case --process-group --wait"


# don't leave .wget-hsts file in home directory
alias wget="wget --hsts-file=/dev/null"


# show TCP and UDP sockets that are actively listening
alias listening="sudo netstat --listening --program --symbolic --tcp --udp"


# open github website in default browser
alias gith="xdg-open https://github.com"
alias gist="xdg-open https://gist.github.com/${GITHUB_USERNAME}"


# open url or file in default browser
alias web="sensible-browser"


# disk space
alias df="\df --human-readable --sync"
alias ds="\df --human-readable --sync | \grep --extended-regexp '/dev/kvm|Filesystem'"


# ncurses disk usage (requires ncdu package)
alias ncdu="ncdu --disable-delete --group-directories-first --one-file-system --show-itemcount"


# memory usage
alias mem="free --human --si | \grep --extended-regex 'Mem|total'"


# list directories and files in tree format
alias tree="tree -ash -CF --du"


# ip addresses
alias internalip="echo 'internal ip addresss:' && echo '---------------------' && \
    hostname --all-ip-addresses | awk '{print \$1}'"
alias externalip="echo 'external ip addresses:' && echo '----------------------' && \
    curl ipv4.icanhazip.com && curl ipv6.icanhazip.com"
alias ips="echo 'ip addresses:' && echo '-------------' && \
    hostname --all-ip-addresses | awk '{print \$1}' && \
    curl ipv4.icanhazip.com && curl ipv6.icanhazip.com"


# --------------------------------- FUNCTIONS ---------------------------------


# install chrome from google repo
install-chrome () {
    local package="google-chrome-stable"
    if dpkg-query -Wf'${db:Status-abbrev}' "${package}" 2>/dev/null | \grep -q '^i'; then
        err "${package} is already installed"
        return 1
    else
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub \
            | sudo tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" \
            | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt update
        sudo apt install "${package}" -y
    fi
}


# remove metadata from an image
# usage: clean-metadata <image_file>
clean-metadata () {
    if [ -z "$1" ]; then
        err "please specify an image file"
        return 1
    fi
    if [ -f /usr/bin/exiv2 ]; then
        exiv2 -k -v delete "$1"
    else
        err "exiv2 not installed"
    fi
}


# run jekyll server for blog and open local url in browser
blog () {
    local blog_dir="${HOME}/code/cgoldberg.github.io"
    local jekyll_server="127.0.0.1:4000"
    if [ ! -d "${blog_dir}" ]; then
        err "${blog_dir} not found"
        return 1
    elif [ ! -x "$(command -v bundle)" ]; then
        err "bundler not found"
        return 1
    fi
    killblog
    echo "running server at: ${jekyll_server}"
    cd ${blog_dir}
    bundle exec jekyll s >/dev/null & disown # silence stdout
    sleep 3.5
    echo "opening browser at: http://${jekyll_server}"
    xdg-open "http://${jekyll_server}"
}


# kill jekyll server running blog
killblog () {
    local blog_dir="${HOME}/code/cgoldberg.github.io"
    local jekyll_proc="jekyll s"
    local jekyll_server="127.0.0.1:4000"
    if [ ! -d "${blog_dir}" ]; then
        err "${blog_dir} not found. no server running"
        return 1
    fi
    if [[ $(psgrep "${jekyll_proc}") ]]; then
        echo "killing server at: ${jekyll_server}"
        pkill -9 -f "${jekyll_proc}" && pidwait -f "${jekyll_proc}"
        psgrep "${jekyll_proc}"
    fi
}


# package maintenance
apt-up () {
    # reload package index files from sources
    sudo apt update --no-allow-insecure-repositories && echo &&
    # check for broken dependencies
    sudo apt-get check && echo &&
    # fix broken dependencies
    sudo apt install --fix-broken && echo &&
    # fix missing dependencies
    sudo apt install --fix-missing && echo &&
    # upgrade installed packages
    sudo apt full-upgrade && echo &&
    # purge packages that are no longer needed
    sudo apt autoremove --purge && echo &&
    # remove cached packages
    sudo apt clean &&
    # purge orphaned configs from removed packages
    purge-apt-configs &&
    # reload package index files from sources
    sudo apt update --no-allow-insecure-repositories && echo
}


# purge configuration data from packages marked as removed
purge-apt-configs () {
    if dpkg -l | grep --quiet '^rc'; then
        echo "$(dpkg -l | grep '^rc' | wc -l) packages have orphaned configs"
        echo "purging package configs from removed packages..."
        dpkg -l | grep '^rc' | awk '{print $2}' | xargs sudo dpkg --purge
    fi
}


# backup public github repos and google drive and store in a tarball in ~/backup
backup-all () {
    local backup_dir="${HOME}/backup"
    local backup_archive="./backups.tar.gz"
    if [ ! ${backup_dir} ]; then
        err "backup directory not found"
        return 1
    fi
    if [ ! -x "$(command -v google_drive_export)" ]; then
        err "google_drive_export not found"
        return 1
    fi
    if [ ! -x "$(command -v githubtakeout)" ]; then
        err "githubtakeout not found"
        return 1
    fi
    echo
    echo "Changing directory to: ${backup_dir}"
    cd "${backup_dir}"
    rm -f "${backup_archive}"
    rm -rf ./exported_files
    rm -rf ./backups
    rm -rf ./google_drive_files
    rm -rf ./github_archives
    google_drive_export
    echo
    githubtakeout "${GITHUB_USERNAME}" --format=tar
    mv ./exported_files ./google_drive_files
    mv ./backups ./github_archives
    tar cvzf "${backup_archive}" *
    echo
    echo "Changing directory back to: ${OLDPWD}"
    cd "${OLDPWD}"
}


# update pyenv
# uninstall each python installation
# install latest of each major python version
# update pip in each python installation
update-pyenv () {
    if [ ! -d "${HOME}/.pyenv" ]; then
        err "pyenv is not installed"
        return 1
    fi
    if [ ! -z "${VIRTUAL_ENV}" ]; then
        echo "deactivating venv"
        deactivate
    fi
    echo
    echo "updating pyenv ..."
    pyenv update
    pyenv rehash
    echo
    for py_version in "${PY_VERSIONS[@]}"; do
        local minor_versions=($(pyenv versions --bare | \grep "${py_version}"))
        for minor_version in "${minor_versions[@]}"; do
            echo "uninstalling Python ${minor_version} ..."
            pyenv uninstall --force "${minor_version}"
            echo
        done
        echo "installing latest version of Python ${py_version} ..."
        pyenv install --force "${py_version}"
        pyenv global "${py_version}"
        echo "installed $(python3 --version)"
        echo
        echo "updating pip ..."
        python3 -m pip install --upgrade pip
        echo
    done
    eval "pyenv global ${PY_VERSIONS[*]}"
    pipx-upgrade-all
}


# -----------------------------------------------------------------------------


# ruby gems
if [ -d "${HOME}/.gems" ]; then
    export GEM_HOME="${HOME}/.gems"
    export PATH="${PATH}:${HOME}/.gems/bin"
fi


# pipx
if [ -x "$(command -v pipx)" ]; then
    eval "$(register-python-argcomplete pipx)"
fi


# pyenv
if [ -d "${HOME}/.pyenv" ]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    [[ -d "${PYENV_ROOT}/bin" ]] && export PATH="${PYENV_ROOT}/bin:${PATH}"
    eval "$(pyenv init - bash)"
    PY_VERSIONS=("3.13" "3.12" "3.11" "3.10" "3.9" "pypy3.11")
    eval "pyenv global ${PY_VERSIONS[*]}"
fi
